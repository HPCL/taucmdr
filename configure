#!/usr/bin/env python
#
# Copyright (c) 2015, ParaTools, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# (1) Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
# (2) Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
# (3) Neither the name of ParaTools, Inc. nor the names of its contributors may
#     be used to endorse or promote products derived from this software without
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
"""TAU Commander installation configuration.

Writes a configuration file used to initialize a new TAU Commander installation.
"""

import os
import sys

HERE = os.path.realpath(os.path.dirname(__file__))

SETUP_CFG_FILE = os.path.join(HERE, 'setup.cfg')

DEFAULTS_CFG_FILE = os.path.join(HERE, 'defaults.cfg')

PROG = sys.argv[0]

sys.path.insert(0, os.path.join(HERE, 'packages'))
try:
    import setuptools
    import tau
    from tau import __version__ as taucmdr_version
    from tau import configuration
    from tau.cli import arguments
    from tau.cli.commands.target.create import COMMAND as target_create_cmd
    from tau.cli.commands.application.create import COMMAND as application_create_cmd
    from tau.cli.commands.measurement.create import COMMAND as measurement_create_cmd
except ImportError as err:
    sys.stderr.write("%(bar)s\n"
                     "! ERROR: %(err)s\n"
                     "!\n"
                     "! Python 2.7 with setuptools is required.\n"
                     "! Try `make python_check` to install Python then update your\n"
                     "! PATH environment variable and try this command again.\n"
                     "%(bar)s\n" % {'bar': '!'*78, 'err': str(err)})
    sys.exit(-1)
except:
    sys.stderr.write("%(bar)s\n"
                     "! ERROR INITIALIZING CONFIGURATION SCRIPT\n"
                     "!\n"
                     "! Python 2.7 with setuptools is required.\n"
                     "! Try `make python_check` to install Python then update your\n"
                     "! PATH environment variable and try this command again.\n"
                     "%(bar)s\n" % {'bar': '!'*78})
    sys.exit(-1)



def build_parser():
    """Builds the command line parser from tau subcommands.
    
    Merges arguments from `tau {target|application|measurement} create` into one parser.
    
    Returns:
        MutuableArgumentParser: The new argument parser.
    """
    description = ("Write installation configuration files:\n"
                   "  '%s'\n"
                   "  '%s'\n"
                   "When TAU Commander is installed, the values passed to this script will\n"
                   "be saved at the system level as the defaults for all new configuration\n"
                   "objects.  These values can be changed in future via `tau configure`."
                   % (SETUP_CFG_FILE, DEFAULTS_CFG_FILE))
    parser = arguments.get_parser(prog=PROG, usage='%s [arguments]' % PROG, description=description)
    parser.add_argument('--prefix', metavar='<path>', help='installation prefix',
                        default='/opt/ParaTools/taucmdr-%s' % taucmdr_version)
    parser.add_argument('-c', '--compile', nargs='?', const=True, default=True, metavar='T/F', 
                        action=arguments.ParseBooleanAction, help="Compile .py files to .pyc bytecode files")
    parser.add_argument('-O', '--optimize', nargs='?', type=int, const=1, default=1, metavar='<level>',
                        help="Also compile .py files to optimized .pyo bytecode files.")
    parser.merge(target_create_cmd.parser, group_title='target arguments', include_positional=False,
                 exclude=['from-tau-makefile'])
    parser.merge(application_create_cmd.parser, group_title='application arguments', include_positional=False)
    parser.merge(measurement_create_cmd.parser, group_title='measurement arguments', include_positional=False)
    return parser


def main():
    parser = build_parser()
    args = parser.parse_args()
    compilers = target_create_cmd.parse_compiler_flags(args)
    
    comment = configuration.config_file_comment
    setup_cfg = configuration.open_config_file('setup.cfg')
    setup_cfg.initial_comment = comment(tau.version_banner())
    defaults_cfg = configuration.default_config()
    defaults_cfg.initial_comment = comment("Initial default values for a new TAU Commander installation.  "
                                           "These can be changed after installation via the `tau configure` command.")
    
    # Add a section to control `python setup.py build`
    setup_cfg['build'] = {}
    setup_cfg.comments['build'] = comment("Arguments to `python setup.py build`.", box=True)
    setup_cfg['build']['build-base'] = "build"
    setup_cfg['install'] = {}
    setup_cfg.comments['install'] = comment("Arguments to `python setup.py install`.", box=True)
    
    # Merge new values into configuration.  Non-model values are added to the 'install' section.
    for section in defaults_cfg.sections:
        for key in defaults_cfg[section]:
            val = getattr(args, key, None)
            if val:
                defaults_cfg[section][key] = val

    # Configure installation parameters
    setup_cfg['install']['prefix'] = args.prefix
    setup_cfg['install']['install-scripts'] = os.path.join(args.prefix, 'bin')
    setup_cfg['install']['install-lib'] = os.path.join(args.prefix, 'packages')
    setup_cfg['install']['install-data'] = os.path.join(args.prefix)
    setup_cfg['install']['record'] = os.path.join(args.prefix, 'install.log')
    setup_cfg['install']['compile'] = args.compile
    setup_cfg['install']['optimize'] = args.optimize
    
    # Write config files
    with open(SETUP_CFG_FILE, "w") as fout:
        setup_cfg.write(fout)
    with open(DEFAULTS_CFG_FILE, "w") as fout:
        defaults_cfg.write(fout)

if __name__ == '__main__':
    sys.exit(main())
    
