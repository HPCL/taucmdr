#!/usr/bin/env python
#
# Copyright (c) 2015, ParaTools, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# (1) Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
# (2) Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
# (3) Neither the name of ParaTools, Inc. nor the names of its contributors may
#     be used to endorse or promote products derived from this software without
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
"""TAU Commander installation configuration.

**This file must be Python 2.6 compatible.** It will bootstrap a Python 2.7 environment
if Python 2.6 is detected.

Writes a configuration file used to initialize a new TAU Commander installation.
"""

import os
import sys

PROG = sys.argv[0]

PACKAGE_TOPDIR = os.path.realpath(os.path.abspath(os.path.dirname(__file__)))

SETUP_CFG_FILE = os.path.join(PACKAGE_TOPDIR, 'setup.cfg')

DEFAULTS_CFG_FILE = os.path.join(PACKAGE_TOPDIR, 'defaults.cfg')

FALLBACK_WARNING = ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"
                    "\n"
                    "IMPORTANT: This is the fallback configuration script for TAU Commander.\n"
                    "A compatible Python 2.7 environment will be created before proceeding.\n"
                    "If possible, you should run this command with Python 2.7 in your PATH and\n"
                    "with the setuptools module installed.\n"
                    "\n"
                    "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")

def _default_prefix():
    try:
        fin = open(os.path.join(PACKAGE_TOPDIR, "VERSION"))
    except IOError:
        sys.stderr.writeln("ERROR: VERSION file is missing!")
        sys.exit(-1)
    else:
        version = fin.readline().strip()
    finally:
        fin.close()
    return '/opt/ParaTools/taucmdr-%s' % version


def _get_prefix():
    # This routine must be Python 2.6 and Python3 compatible
    from optparse import OptionParser, BadOptionError, AmbiguousOptionError
    class PassThroughOptionParser(OptionParser):
        def _process_args(self, largs, rargs, values):
            while rargs:
                try:
                    OptionParser._process_args(self,largs,rargs,values)
                except (BadOptionError, AmbiguousOptionError) as e:
                    largs.append(e.opt_str)
    parser = PassThroughOptionParser(description=FALLBACK_WARNING)
    parser.add_option("--prefix", dest="prefix", help='Installation prefix.', metavar="<path>")
    options, _ = parser.parse_args()
    return options.prefix if options.prefix else _default_prefix()


def _bootstrap_conda():
    # This routine must be Python 2.6 and Python3 compatible
    import subprocess
    print(FALLBACK_WARNING)
    prefix = _get_prefix()
    cmd = ['make', 'python_check', 'INSTALLDIR=' + prefix]
    try:
        subprocess.check_call(cmd, cwd=PACKAGE_TOPDIR)
    except subprocess.CalledProcessError as err:
        sys.stderr.write("Command '%s' failed with return code '%s'\n" % (' '.join(cmd), err.returncode))
        sys.exit(-1)
    os.environ['PATH'] = os.path.join(prefix, 'conda', 'bin') + ":" + os.environ['PATH']
    os.environ['__TAUCMDR_CONFIGURE_BOOTSTRAPPED__'] = '1'
    # Run myself again now with Python 2.7 from conda
    os.execv(PROG, sys.argv)


def build_parser(setup_cfg, default_cfg):
    """Builds the command line parser from tau subcommands.
    
    Merges arguments from `tau {target|application|measurement} create` into one parser.
    
    Returns:
        MutuableArgumentParser: The new argument parser.
    """
    def update_defaults(section, parser):
        for key, val in section.iteritems():
                for act in parser._actions:
                    if val and act.dest == key:
                        act.default = val
    install = setup_cfg['install']
    description = ("Write installation configuration files:\n"
                   "  - %s\n"
                   "  - %s\n"
                   "\n"
                   "The values passed to this script will be saved at the system level\n"
                   "as the defaults for all new configuration objects.  These values can\n"
                   "be changed in future via `tau configure`."
                   % (SETUP_CFG_FILE, DEFAULTS_CFG_FILE))
    parser = arguments.get_parser(prog=PROG, usage='%s [arguments]' % PROG, description=description)
    parser.add_argument('--prefix', metavar='<path>', help='Installation prefix.',
                        default=install.get('prefix', _default_prefix()))
    parser.add_argument('-c', '--compile', nargs='?', const=True, metavar='T/F', 
                        action=arguments.ParseBooleanAction, help="Compile .py files to .pyc bytecode files.",
                        default=configuration.parse_config_string(install.get('compile', True)))
    parser.add_argument('-O', '--optimize', nargs='?', type=int, const=1, metavar='<level>',
                        help="Also compile .py files to optimized .pyo bytecode files.",
                        default=configuration.parse_config_string(install.get('optimize', 1)))
    
    target_parser = target_create_cmd.parser
    update_defaults(default_cfg['Target'], target_parser)
    parser.merge(target_parser, group_title='target arguments', include_positional=False,
                 exclude=['from-tau-makefile'])
    
    application_parser = application_create_cmd.parser
    update_defaults(default_cfg['Application'], application_parser)
    parser.merge(application_parser, group_title='application arguments', include_positional=False)
    
    measurement_parser = measurement_create_cmd.parser
    update_defaults(default_cfg['Measurement'], measurement_parser)    
    parser.merge(measurement_create_cmd.parser, group_title='measurement arguments', include_positional=False)

    return parser


def main():
    comment = configuration.config_file_comment
    setup_cfg = configuration.open_config_file('setup.cfg')
    setup_cfg.initial_comment = comment(taucmdr.version_banner())
    if 'build' not in setup_cfg:
        setup_cfg['build'] = {}
        setup_cfg['build']['build-base'] = "build"
        setup_cfg.comments['build'] = comment("Arguments to `python setup.py build`.", box=True)
    if 'install' not in setup_cfg:
        setup_cfg['install'] = {}
        setup_cfg.comments['install'] = comment("Arguments to `python setup.py install`.", box=True)

    defaults_cfg = configuration.default_config('defaults.cfg')
    defaults_cfg.initial_comment = comment("Initial default values for a new TAU Commander installation.  "
                                           "These can be changed after installation via the `tau configure` command.")
    
    parser = build_parser(setup_cfg, defaults_cfg)
    args = parser.parse_args()
    compilers = target_create_cmd.parse_compiler_flags(args)
    
    # Disable Score-P if Fortran compiler not specifieid
    if FC.keyword not in compilers:
        args.scorep_source = 'None'

    # Merge new values into configuration.
    for section in defaults_cfg.sections:
        for key in defaults_cfg[section]:
            val = getattr(args, key, None)
            if val is not None:
                defaults_cfg[section][key] = val

    # Configure installation parameters
    install = setup_cfg['install']
    install['prefix'] = args.prefix
    install['compile'] = args.compile
    install['optimize'] = args.optimize
    
    # Write config files
    with open(SETUP_CFG_FILE, "w") as fout:
        setup_cfg.write(fout)
    with open(DEFAULTS_CFG_FILE, "w") as fout:
        defaults_cfg.write(fout)
    
    print('\nTAU Commander configured successfully!  Type `make install` to finish the installation.')


if __name__ == '__main__':
    sys.path.insert(0, os.path.join(PACKAGE_TOPDIR, 'packages'))
    try:
        import setuptools
        import taucmdr
        from taucmdr import __version__ as taucmdr_version
        from taucmdr import logger, configuration
        from taucmdr.cli import arguments
        from taucmdr.cli.commands.target.create import COMMAND as target_create_cmd
        from taucmdr.cli.commands.application.create import COMMAND as application_create_cmd
        from taucmdr.cli.commands.measurement.create import COMMAND as measurement_create_cmd
        from taucmdr.cf.compiler.host import FC
    except (SystemExit, Exception) as err:
        # Prevent infinite recursion: only bootstrap once
        if not os.environ.get('__TAUCMDR_CONFIGURE_BOOTSTRAPPED__'):
            _bootstrap_conda()
        else:
            sys.stderr.write("ERROR: %s\n"
                             "\n"
                             "Python 2.7 with setuptools is required to install TAU Commander.\n"
                             "\n"
                             "Type `make INSTALLDIR=<install_prefix>` to install Python then\n"
                             "add '<install_prefix>/conda/bin' to your PATH environment variable\n"
                             "and try this command again.\n" % err)
            sys.exit(-1)
    sys.exit(main())
    
