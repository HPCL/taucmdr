#!/usr/bin/env python
#
# Copyright (c) 2015, ParaTools, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# (1) Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
# (2) Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
# (3) Neither the name of ParaTools, Inc. nor the names of its contributors may
#     be used to endorse or promote products derived from this software without
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
"""TAU Commander installation configuration.

**This file must be Python 2.6 compatible.** It will bootstrap a Python 2.7 environment
if Python 2.6 is detected.

Writes a configuration file used to initialize a new TAU Commander installation.
"""
import os
import sys


PROG = sys.argv[0]

PACKAGE_TOPDIR = os.path.realpath(os.path.abspath(os.path.dirname(__file__)))

FALLBACK_WARNING = ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"
                    "\n"
                    "IMPORTANT: This is the fallback configuration script for TAU Commander.\n"
                    "A compatible Python 2.7 environment will be created before proceeding.\n"
                    "If possible, you should run this command with Python 2.7 in your PATH and\n"
                    "with the setuptools module installed.\n"
                    "\n"
                    "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")


def _default_prefix():
    # This routine must be Python 2.6 and Python3 compatible
    try:
        fin = open(os.path.join(PACKAGE_TOPDIR, "VERSION"))
    except IOError:
        sys.stderr.write("ERROR: VERSION file is missing!\n")
        sys.exit(-1)
    else:
        version = fin.readline().strip()
    finally:
        fin.close()
    return '/opt/ParaTools/taucmdr-%s' % version


def _bootstrap_python():
    # This routine must be Python 2.6 and Python3 compatible
    import subprocess
    from optparse import OptionParser, BadOptionError
    class PassThroughOptionParser(OptionParser):
        def _process_args(self, largs, rargs, values):
            while rargs:
                try:
                    OptionParser._process_args(self, largs, rargs, values)
                except BadOptionError as err:
                    largs.append(err.opt_str)
    print(FALLBACK_WARNING)
    parser = PassThroughOptionParser(description=FALLBACK_WARNING)
    parser.add_option("--prefix", dest="prefix", help='Installation prefix.', metavar="<path>")
    options, _ = parser.parse_args()
    prefix = options.prefix if options.prefix else _default_prefix()
    cmd = ['make', 'python_check', 'INSTALLDIR=' + prefix]
    try:
        subprocess.check_call(cmd, cwd=PACKAGE_TOPDIR)
    except subprocess.CalledProcessError as err:
        sys.stderr.write("Command '%s' failed with return code '%s'\n" % (' '.join(cmd), err.returncode))
        sys.exit(-1)
    os.environ['PATH'] = os.path.join(prefix, 'conda', 'bin') + ":" + os.environ['PATH']
    os.environ['__TAUCMDR_CONFIGURE_BOOTSTRAPPED__'] = '1'
    # Run myself again now with Python 2.7 from conda
    os.execv(PROG, sys.argv)


def _print_section(title, items):
    title = util.hline(title, 'cyan')
    rows = [['Argument', 'Value']]
    for arg, val in sorted(items):
        rows.append([arg, val])
    table = Texttable(logger.LINE_WIDTH)
    table.set_cols_align(['r', 'l'])
    table.add_rows(rows)
    print('\n'.join([title, table.draw(), '']))


def _translate_arg(arg):
    if isinstance(arg, basestring):
        return arg
    try:
        return ' '.join(arg)
    except TypeError:
        pass
    return str(arg)


def main():
    """Program entry point."""
    from taucmdr.cf.software import tau_installation
    tau_installation.check_env_compat()
    
    init_parser = initialize_cmd.parser
    parser = arguments.get_parser(prog=PROG, usage='%s [arguments]' % PROG, 
                                  description="Pre-build TAU configurations.")
    parser.add_argument('--prefix', metavar='<path>', help='Installation prefix.', default=_default_prefix())
    parser.merge(init_parser, include_positional=False,
                 exclude_groups=['project arguments'],
                 exclude_arguments=['project-name', 'target-name', 'application-name', 'measurement-name', 
                                    'tau-options', 'from-tau-makefile', 'bare'])
    args = parser.parse_args()
    if args.prefix.startswith("="):
        LOGGER.warning("Installation prefix starts with '='.  Is that what you intended?")
    prefix = os.path.abspath(os.path.expanduser(args.prefix))
    del args.prefix
    
    sections = {}
    for key, val in sorted(vars(args).iteritems()):
        if key.endswith('_family'):
            continue
        for action in parser._actions:
            if key == action.dest:
                items = sections.setdefault(action.container.title.title(), [])
                items.append((action.option_strings[0], _translate_arg(val)))
                break
    for title, items in sections.iteritems():
        _print_section(title, items)
    
    config = SafeConfigParser(allow_no_value=True)
    config.add_section('build')
    config.set('build', 'build-base', 'build')
    config.add_section('install')
    config.set('install', 'prefix', prefix)
    config.set('install', 'compile', 'true')
    config.set('install', 'optimize', '1')
    config.add_section('tau_initialize')
    for items in sections.itervalues():
        for key, val in items:
            config.set('tau_initialize', key, _translate_arg(val))
    with open(os.path.join(PACKAGE_TOPDIR, 'setup.cfg'), "w") as fout:
        config.write(fout)
        
    LOGGER.info('Type `make install` to build TAU configurations to support the project configuration listed above.')
    return EXIT_SUCCESS


if __name__ == '__main__':
    sys.path.insert(0, os.path.join(PACKAGE_TOPDIR, 'packages'))
    try:
        # We import some packages just to assert that they're importable
        # pylint: disable=unused-import,broad-except
        import setuptools
        from ConfigParser import SafeConfigParser
        from texttable import Texttable
        from taucmdr import logger, util, EXIT_SUCCESS
        from taucmdr.cli import arguments
        from taucmdr.cli.commands.initialize import COMMAND as initialize_cmd
    except (SystemExit, Exception) as err:
        # Prevent infinite recursion: only bootstrap once
        if not os.environ.get('__TAUCMDR_CONFIGURE_BOOTSTRAPPED__'):
            _bootstrap_python()
        else:
            sys.stderr.write("ERROR: %s\n"
                             "\n"
                             "Python 2.7 with setuptools is required to install TAU Commander.\n"
                             "\n"
                             "Type `make INSTALLDIR=<install_prefix>` to install Python then\n"
                             "add '<install_prefix>/conda/bin' to your PATH environment variable\n"
                             "and try this command again.\n" % err)
            sys.exit(-1)
    LOGGER = logger.get_logger(__name__)
    sys.exit(main())
    
